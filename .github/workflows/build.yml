name: Build and Publish

on:
  push:
    branches:
      - main  # Ajuste para a branch principal do seu repositório
      - 'feat/*'  # Incluir branches de feature
      - 'feature/*'  # Incluir branches de feature
      - 'bugfix/*'  # Incluir branches de bugfix

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4  # Usa a ação para fazer checkout do código-fonte

      - name: Set up JDK  # Exemplo de configuração do ambiente Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt-openj9' # Veja 'Supported distributions' para opções disponíveis
          java-version: '21'  # Define a versão do JDK
          cache: 'maven' # Habilita cache ao maven

      - name: Test with Maven  # Teste com Maven
        run: mvn test  # Comando para executar o teste com Maven

      - name: Build with Maven  # Build com Maven
        run: mvn clean install  # Comando para executar o build com Maven

  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    if: github.event_name == 'pull_request'  # Executar em PRs e branches

    steps:
      - name: Checkout
        uses: actions/checkout@v4  # Usa a ação para fazer checkout do código-fonte

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-

      - name: Set up JDK  # Exemplo de configuração do ambiente Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt-openj9' # Veja 'Supported distributions' para opções disponíveis
          java-version: '21'  # Define a versão do JDK
          cache: 'maven' # Habilita cache ao maven

      - name: Run Tests and Generate Coverage Report
        run: mvn verify  # Comando para executar os testes e gerar o relatório de cobertura

      - name: Add coverage to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: |
            ${{ github.workspace }}/target/jacoco-report/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 40
          min-coverage-changed-files: 80

      - name: Fail PR if overall coverage is less than 80%
        if: ${{ steps.jacoco.outputs.coverage-overall < 80.0 }}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('Overall coverage is less than 80%!')

  publish:
    needs: build  # Este job depende do job "build"
    name: Publish to Packages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.ref == 'refs/heads/main'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_ACTOR: ${{ github.actor }}
      USERNAME: ${{ github.repository_owner }}
      REPOSITORY: ${{ github.event.repository.name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4  # Usa a ação para fazer checkout do código-fonte

      - name: Set up JDK  # Exemplo de configuração do ambiente Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt-openj9' # Veja 'Supported distributions' para opções disponíveis
          java-version: '21'  # Define a versão do JDK
          cache: 'maven' # Habilita cache ao maven
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file


      - name: Create settings.xml for Maven
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>github</id>
                      <username>${GITHUB_ACTOR}</username>
                      <password>${GITHUB_TOKEN}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Publish to GitHub Packages Apache Maven
        run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get project version
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Send notification to Slack
        env:
          SLACK_WEBHOOK_URL: ${{ vars.AVPAY_SLACK_WEBHOOK_URL }}
          PROJECT_VERSION: ${{ env.PROJECT_VERSION }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"Uma nova versão da lib está disponível: $PROJECT_VERSION\"}" \
          $SLACK_WEBHOOK_URL